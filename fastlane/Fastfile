fastlane_version "2.78.0"

before_all do
  ensure_git_status_clean
  # git_pull
end

platform :ios do
  xcodeproj = "./ios/Tag.xcodeproj"
  xcworkspace = "./ios/Tag.xcworkspace"

  private_lane :build do
    increment_build_number(xcodeproj: xcodeproj)
    gym(
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.saferetrieve.tag.a" => "Tag App Store",
        }
      },
      scheme: "Tag",
      workspace: xcworkspace
    )
  end

  desc "Ship to TestFlight"
  lane :beta do
    # ensure_git_branch(branch: "develop")
    build
    pilot
    # commit_version_bump(message: "Bump build", xcodeproj: xcodeproj)
    # push_to_git_remote
  end
end

platform :android do
  project_dir = "./android"

  private_lane :increment_version_code do
    # Lanes run with a different current directory than actions.
    # See https://docs.fastlane.tools/advanced/#directory-behavior
    path = File.expand_path("../android/app/build.gradle")
    regex = /(versionCode\s+)(\d+)/

    source = File.read(path)
    match = source.match(regex)
    raise "Missing versionCode in gradle file at #{path}" if match.nil?

    label = match[1]
    version_code = match[2].to_i
    UI.message("Current version code is: #{version_code}")
    next_version_code = version_code + 1

    File.open(path, "w") do |f|
      f.write source.gsub(regex, "#{label}#{next_version_code}")
    end

    UI.success("Updated version code to: #{next_version_code}")
  end

  private_lane :build do
    increment_version_code
    gradle(task: "clean", project_dir: project_dir)
    gradle(task: "assemble", build_type: "Release", project_dir: project_dir)
    supply
  end

  desc "Ship to PlayStore Beta"
  lane :beta do
    # ensure_git_branch(branch: "develop")
    build
    supply(track: "beta", json_key: File.join(project_dir, "google-play-release-key.json"))
    # commit_version_bump(message: "Bump build", xcodeproj: xcodeproj)
    # push_to_git_remote
  end
end